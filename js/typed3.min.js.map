{"version":3,"sources":["typed3.js"],"names":["$","Typed","el","options","this","extend","fn","typed","defaults","isInput","is","attr","showCursor","elContent","text","contentType","typeSpeed","startDelay","backSpeed","backDelay","stringsElement","strings","strPos","arrayPos","stopNum","loop","loopCount","curLoop","stop","isbackspacing","cursorChar","shuffle","sequence","curStringPause","curStrPosPause","build","prototype","constructor","init","self","timeout","setTimeout","i","length","shuffleArray","typewrite","cursor","after","hide","find","each","key","value","push","html","curString","curStrPos","humanize","Math","round","random","charPause","substr","charAt","skip","test","exec","parseInt","substring","curChar","tag","endTag","onStringTyped","callback","backspace","preStringTyped","nextString","val","array","tmp","current","top","floor","toggleTyped","unpause","pause","reset","clearInterval","id","remove","resetCallback","option","$this","data","window","jQuery"],"mappings":"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","file":"typed3.min.js","sourcesContent":["// The MIT License (MIT)\n\n// Typed.js | Copyright (c) 2014 Matt Boldt | www.mattboldt.com\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n\n! function($) {\n\n    \"use strict\";\n\n    var Typed = function(el, options) {\n\n        // chosen element to manipulate text\n        this.el = $(el);\n\n        // options\n        this.options = $.extend({}, $.fn.typed.defaults, options);\n\n        // attribute to type into\n        this.isInput = this.el.is('input');\n        this.attr = this.options.attr;\n\n        // show cursor\n        this.showCursor = this.isInput ? false : this.options.showCursor;\n\n        // text content of element\n        this.elContent = this.attr ? this.el.attr(this.attr) : this.el.text()\n\n        // html or plain text\n        this.contentType = this.options.contentType;\n\n        // typing speed\n        this.typeSpeed = this.options.typeSpeed;\n\n        // add a delay before typing starts\n        this.startDelay = this.options.startDelay;\n\n        // backspacing speed\n        this.backSpeed = this.options.backSpeed;\n\n        // amount of time to wait before backspacing\n        this.backDelay = this.options.backDelay;\n\n        // div containing strings\n        this.stringsElement = this.options.stringsElement;\n\n        // input strings of text\n        this.strings = this.options.strings;\n\n        // character number position of current string\n        this.strPos = 0;\n\n        // current array position\n        this.arrayPos = 0;\n\n        // number to stop backspacing on.\n        // default 0, can change depending on how many chars\n        // you want to remove at the time\n        this.stopNum = 0;\n\n        // Looping logic\n        this.loop = this.options.loop;\n        this.loopCount = this.options.loopCount;\n        this.curLoop = 0;\n\n        // for stopping\n        this.stop = false;\n        this.isbackspacing = false;\n        // custom cursor\n        this.cursorChar = this.options.cursorChar;\n\n        // shuffle the strings\n        this.shuffle = this.options.shuffle;\n        // the order of strings\n        this.sequence = [];\n\n        // store paused position\n        this.curStringPause = null;\n        this.curStrPosPause = null;\n\n        // All systems go!\n        this.build();\n    };\n\n    Typed.prototype = {\n\n        constructor: Typed\n\n        ,\n        init: function() {\n            // begin the loop w/ first current string (global self.strings)\n            // current string will be passed as an argument each time after this\n            var self = this;\n            self.timeout = setTimeout(function() {\n                for (var i=0;i<self.strings.length;++i) self.sequence[i]=i;\n\n                // shuffle the array if true\n                if(self.shuffle) self.sequence = self.shuffleArray(self.sequence);\n\n                // Start typing\n                self.typewrite(self.strings[self.sequence[self.arrayPos]], self.strPos);\n            }, self.startDelay);\n        }\n\n        ,\n        build: function() {\n            var self = this;\n            // Insert cursor\n            if (this.showCursor === true) {\n                this.cursor = $(\"<span class=\\\"typed-cursor\\\">\" + this.cursorChar + \"</span>\");\n                this.el.after(this.cursor);\n            }\n            if (this.stringsElement) {\n                self.strings = [];\n                this.stringsElement.hide();\n                var strings = this.stringsElement.find('p');\n                $.each(strings, function(key, value){\n                    self.strings.push($(value).html());\n                });\n            }\n            this.init();\n        }\n\n        // pass current string state to each function, types 1 char per call\n        ,\n        typewrite: function(curString, curStrPos) {\n\n            var self = this;\n            // cache character and string position\n            self.curStringPause = curString;\n            self.curStrPosPause = curStrPos;\n            // exit when stopped\n            if (this.stop === true) {\n                return;\n            }\n\n            // varying values for setTimeout during typing\n            // can't be global since number changes each time loop is executed\n            var humanize = Math.round(Math.random() * (100 - 30)) + this.typeSpeed;\n            self.isbackspacing = false;\n\n            // ------------- optional ------------- //\n            // backpaces a certain string faster\n            // ------------------------------------ //\n            // if (self.arrayPos == 1){\n            //  self.backDelay = 50;\n            // }\n            // else{ self.backDelay = 500; }\n\n            // contain typing function in a timeout humanize'd delay\n            self.timeout = setTimeout(function() {\n                // check for an escape character before a pause value\n                // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n                // single ^ are removed from string\n                var charPause = 0;\n                var substr = curString.substr(curStrPos);\n                if (substr.charAt(0) === '^') {\n                    var skip = 1; // skip atleast 1\n                    if (/^\\^\\d+/.test(substr)) {\n                        substr = /\\d+/.exec(substr)[0];\n                        skip += substr.length;\n                        charPause = parseInt(substr);\n                    }\n\n                    // strip out the escape character and pause value so they're not printed\n                    curString = curString.substring(0, curStrPos) + curString.substring(curStrPos + skip);\n                }\n\n                if (self.contentType === 'html') {\n                    // skip over html tags while typing\n                    var curChar = curString.substr(curStrPos).charAt(0)\n                    if (curChar === '<' || curChar === '&') {\n                        var tag = '';\n                        var endTag = '';\n                        if (curChar === '<') {\n                            endTag = '>'\n                        } else {\n                            endTag = ';'\n                        }\n                        while (curString.substr(curStrPos).charAt(0) !== endTag) {\n                            tag += curString.substr(curStrPos).charAt(0);\n                            curStrPos++;\n                        }\n                        curStrPos++;\n                        tag += endTag;\n                    }\n                }\n\n                // timeout for any pause after a character\n                self.timeout = setTimeout(function() {\n                    if (curStrPos === curString.length) {\n                        // fires callback function\n                        self.options.onStringTyped(self.arrayPos);\n\n                        // is this the final string\n                        if (self.arrayPos === self.strings.length - 1) {\n                            // animation that occurs on the last typed string\n                            self.options.callback();\n\n                            self.curLoop++;\n\n                            // quit if we wont loop back\n                            if (self.loop === false || self.curLoop === self.loopCount)\n                                return;\n                        }\n\n                        self.timeout = setTimeout(function() {\n                            self.backspace(curString, curStrPos);\n                        }, self.backDelay);\n                    } else {\n\n                        /* call before functions if applicable */\n                        if (curStrPos === 0)\n                            self.options.preStringTyped(self.arrayPos);\n\n                        // start typing each new char into existing string\n                        // curString: arg, self.el.html: original text inside element\n                        var nextString = curString.substr(0, curStrPos + 1);\n                        if (self.attr) {\n                            self.el.attr(self.attr, nextString);\n                        } else {\n                            if (self.isInput) {\n                                self.el.val(nextString);\n                            } else if (self.contentType === 'html') {\n                                self.el.html(nextString);\n                            } else {\n                                self.el.text(nextString);\n                            }\n                        }\n\n                        // add characters one by one\n                        curStrPos++;\n                        // loop the function\n                        self.typewrite(curString, curStrPos);\n                    }\n                    // end of character pause\n                }, charPause);\n\n                // humanized value for typing\n            }, humanize);\n\n        }\n\n        ,\n        backspace: function(curString, curStrPos) {\n            // exit when stopped\n            if (this.stop === true) {\n                return;\n            }\n\n            // varying values for setTimeout during typing\n            // can't be global since number changes each time loop is executed\n            var humanize = Math.round(Math.random() * (100 - 30)) + this.backSpeed;\n            var self = this;\n            self.isbackspacing = true;\n            self.timeout = setTimeout(function() {\n\n                // ----- this part is optional ----- //\n                // check string array position\n                // on the first string, only delete one word\n                // the stopNum actually represents the amount of chars to\n                // keep in the current string. In my case it's 14.\n                // if (self.arrayPos == 1){\n                //  self.stopNum = 14;\n                // }\n                //every other time, delete the whole typed string\n                // else{\n                //  self.stopNum = 0;\n                // }\n\n                if (self.contentType === 'html') {\n                    // skip over html tags while backspacing\n                    if (curString.substr(curStrPos).charAt(0) === '>') {\n                        var tag = '';\n                        while (curString.substr(curStrPos).charAt(0) !== '<') {\n                            tag -= curString.substr(curStrPos).charAt(0);\n                            curStrPos--;\n                        }\n                        curStrPos--;\n                        tag += '<';\n                    }\n                }\n\n                // ----- continue important stuff ----- //\n                // replace text with base text + typed characters\n                var nextString = curString.substr(0, curStrPos);\n                if (self.attr) {\n                    self.el.attr(self.attr, nextString);\n                } else {\n                    if (self.isInput) {\n                        self.el.val(nextString);\n                    } else if (self.contentType === 'html') {\n                        self.el.html(nextString);\n                    } else {\n                        self.el.text(nextString);\n                    }\n                }\n\n                // if the number (id of character in current string) is\n                // less than the stop number, keep going\n                if (curStrPos > self.stopNum) {\n                    // subtract characters one by one\n                    curStrPos--;\n                    // loop the function\n                    self.backspace(curString, curStrPos);\n                }\n                // if the stop number has been reached, increase\n                // array position to next string\n                else if (curStrPos <= self.stopNum) {\n                    self.arrayPos++;\n\n                    if (self.arrayPos === self.strings.length) {\n                        self.arrayPos = 0;\n\n                        // Shuffle sequence again\n                        if(self.shuffle) self.sequence = self.shuffleArray(self.sequence);\n\n                        self.init();\n                    } else\n                        self.typewrite(self.strings[self.sequence[self.arrayPos]], curStrPos);\n                }\n\n                // humanized value for typing\n            }, humanize);\n\n        }\n        /**\n         * Shuffles the numbers in the given array.\n         * @param {Array} array\n         * @returns {Array}\n         */\n        ,shuffleArray: function(array) {\n            var tmp, current, top = array.length;\n            if(top) while(--top) {\n                current = Math.floor(Math.random() * (top + 1));\n                tmp = array[current];\n                array[current] = array[top];\n                array[top] = tmp;\n            }\n            return array;\n        }\n\n        ,toggleTyped: function() {\n            var self = this;\n            if (self.stop) {\n                self.unpause();\n            } else if (self.stop === false && self.isbackspacing === false) {\n                self.pause();\n            }\n            return;\n        }\n\n        ,pause: function() {\n            var self = this;\n            if (self.stop === true) return;\n            self.stop = true;\n        }\n\n        ,unpause: function() {\n            var self = this;\n            if (self.stop === false) return;\n            self.stop = false;\n            self.typewrite(self.curStringPause, self.curStrPosPause);\n        }\n\n        // Start & Stop currently not working\n\n        // , stop: function() {\n        //     var self = this;\n\n        //     self.stop = true;\n        //     clearInterval(self.timeout);\n        // }\n\n        // , start: function() {\n        //     var self = this;\n        //     if(self.stop === false)\n        //        return;\n\n        //     this.stop = false;\n        //     this.init();\n        // }\n\n        // Reset and rebuild the element\n        ,\n        reset: function() {\n            var self = this;\n            clearInterval(self.timeout);\n            var id = this.el.attr('id');\n            this.el.after('<span id=\"' + id + '\"/>')\n            this.el.remove();\n            if (typeof this.cursor !== 'undefined') {\n                this.cursor.remove();\n            }\n            // Send the callback\n            self.options.resetCallback();\n        }\n\n    };\n\n    $.fn.typed = function(option) {\n        return this.each(function() {\n            var $this = $(this),\n                data = $this.data('typed'),\n                options = typeof option == 'object' && option;\n            if (!data) $this.data('typed', (data = new Typed(this, options)));\n            if (typeof option == 'string') data[option]();\n        });\n    };\n\n    $.fn.typed.defaults = {\n        strings: [\"These are the default values...\", \"You know what you should do?\", \"Use your own!\", \"Have a great day!\"],\n        stringsElement: null,\n        // typing speed\n        typeSpeed: 0,\n        // time before typing starts\n        startDelay: 0,\n        // backspacing speed\n        backSpeed: 0,\n        // shuffle the strings\n        shuffle: false,\n        // time before backspacing\n        backDelay: 500,\n        // loop\n        loop: false,\n        // false = infinite\n        loopCount: false,\n        // show cursor\n        showCursor: true,\n        // character for cursor\n        cursorChar: \"|\",\n        // attribute to type (null == text)\n        attr: null,\n        // either html or text\n        contentType: 'html',\n        // call when done callback function\n        callback: function() {},\n        // starting callback function before each string\n        preStringTyped: function() {},\n        //callback for every typed string\n        onStringTyped: function() {},\n        // callback for reset\n        resetCallback: function() {}\n    };\n\n\n}(window.jQuery);\n"]}