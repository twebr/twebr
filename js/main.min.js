function shuffle(t){var r,s,n;for(n=t.length;n;n--)r=Math.floor(Math.random()*n),s=t[n-1],t[n-1]=t[r],t[r]=s}$(document).ready(function(){var t=$("#js-hero"),r=$("#js-typed-strings"),s=$('<span class="js-typed-cursor">|</span>'),n="js-typed-cursor--stationary";t.after(s),r.hide();var a=function(){var t=r.children(),s=[];$.each(t,function(t,r){s.push($(r).html())});var n=[s[0]];return s.shift(),shuffle(s),n.concat(s)},o=a();console.log(o);var e=function(r,a,o){0===a&&s.removeClass(n);var u=r.substr(a).charAt(0);if("<"===u||"&"===u){var c="",h="";for(h="<"===u?">":";";r.substr(a+1).charAt(0)!==h&&(c+=r.substr(a).charAt(0),a++,!(a+1>r.length)););a++,c+=h}var f=Math.round(15+75*Math.random());setTimeout(function(){a===r.length?(s.addClass(n),"function"==typeof o&&o()):(a++,t.html(r.substr(0,a)),e(r,a,o))},f)},u=function(r,a,o){if(a===r.length&&s.removeClass(n),">"===r.substr(a).charAt(0)){for(var e="";"<"!==r.substr(a-1).charAt(0)&&(e-=r.substr(a).charAt(0),a--,!(a<0)););a--,e+="<"}var c=Math.round(15+25*Math.random());setTimeout(function(){0===a?(s.addClass(n),"function"==typeof o&&o()):(a--,t.html(r.substr(0,a)),u(r,a,o))},c)},c=0,h=function(){var t=c;c=(c+1)%o.length,u(o[t],o[t].length,function(){e(o[c],0)})};e(o[0],0,function(){$(".js-retype").addClass("js-retype--visible")}),$(".js-retype").on("click",function(){h()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
