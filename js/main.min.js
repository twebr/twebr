function shuffle(t){var r,n,s;for(s=t.length;s;s--)r=Math.floor(Math.random()*s),n=t[s-1],t[s-1]=t[r],t[r]=n}$(document).ready(function(){var t=$("#js-hero"),r=$("#js-typed-strings"),n=$('<span class="js-typed-cursor">|</span>'),s="js-typed-cursor__stationary";t.after(n),r.hide();var a=function(){var t=r.children(),n=[];$.each(t,function(t,r){n.push($(r).html())});var s=[n[0]];return n.shift(),shuffle(n),s.concat(n)},o=a();console.log(o);var e=function(r,a,o){0===a&&n.removeClass(s);var u=r.substr(a).charAt(0);if("<"===u||"&"===u){var c="",h="";for(h="<"===u?">":";";r.substr(a+1).charAt(0)!==h&&(c+=r.substr(a).charAt(0),a++,!(a+1>r.length)););a++,c+=h}var f=Math.round(10+70*Math.random());setTimeout(function(){a===r.length?n.addClass(s):(a++,t.html(r.substr(0,a)),e(r,a,o))},f)},u=function(r,a,o){if(a===r.length&&n.removeClass(s),">"===r.substr(a).charAt(0)){for(var e="";"<"!==r.substr(a-1).charAt(0)&&(e-=r.substr(a).charAt(0),a--,!(a<0)););a--,e+="<"}var c=Math.round(10+70*Math.random());setTimeout(function(){0===a?(n.addClass(s),"function"==typeof o&&o()):(a--,t.html(r.substr(0,a)),u(r,a,o))},c)},c=0,h=function(){var t=c;c=(c+1)%o.length,u(o[t],o[t].length,function(){e(o[c],0)})};e(o[0],0),$(".js-retype").on("click",function(){h()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
