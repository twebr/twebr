!function(t){"use strict";var s=function(s,e){this.el=t(s),this.options=t.extend({},t.fn.typed.defaults,e),this.isInput=this.el.is("input"),this.attr=this.options.attr,this.showCursor=!this.isInput&&this.options.showCursor,this.elContent=this.attr?this.el.attr(this.attr):this.el.text(),this.contentType=this.options.contentType,this.typeSpeed=this.options.typeSpeed,this.startDelay=this.options.startDelay,this.backSpeed=this.options.backSpeed,this.backDelay=this.options.backDelay,this.stringsElement=this.options.stringsElement,this.strings=this.options.strings,this.strPos=0,this.arrayPos=0,this.stopNum=0,this.loop=this.options.loop,this.loopCount=this.options.loopCount,this.curLoop=0,this.stop=!1,this.isbackspacing=!1,this.cursorChar=this.options.cursorChar,this.shuffle=this.options.shuffle,this.sequence=[],this.curStringPause=null,this.curStrPosPause=null,this.build()};s.prototype={constructor:s,init:function(){var t=this;t.timeout=setTimeout(function(){for(var s=0;s<t.strings.length;++s)t.sequence[s]=s;t.shuffle&&(t.sequence=t.shuffleArray(t.sequence)),t.typewrite(t.strings[t.sequence[t.arrayPos]],t.strPos)},t.startDelay)},build:function(){var s=this;if(this.showCursor===!0&&(this.cursor=t('<span class="typed-cursor">'+this.cursorChar+"</span>"),this.el.after(this.cursor)),this.stringsElement){s.strings=[],this.stringsElement.hide();var e=this.stringsElement.find("p");t.each(e,function(e,i){s.strings.push(t(i).html())})}this.init()},typewrite:function(t,s){var e=this;if(e.curStringPause=t,e.curStrPosPause=s,this.stop!==!0){var i=Math.round(70*Math.random())+this.typeSpeed;e.isbackspacing=!1,e.timeout=setTimeout(function(){var i=0,r=t.substr(s);if("^"===r.charAt(0)){var o=1;/^\^\d+/.test(r)&&(r=/\d+/.exec(r)[0],o+=r.length,i=parseInt(r)),t=t.substring(0,s)+t.substring(s+o)}if("html"===e.contentType){var n=t.substr(s).charAt(0);if("<"===n||"&"===n){var a="",u="";for(u="<"===n?">":";";t.substr(s).charAt(0)!==u;)a+=t.substr(s).charAt(0),s++;s++,a+=u}}e.timeout=setTimeout(function(){if(s===t.length){if(e.options.onStringTyped(e.arrayPos),e.arrayPos===e.strings.length-1&&(e.options.callback(),e.curLoop++,e.loop===!1||e.curLoop===e.loopCount))return;e.timeout=setTimeout(function(){e.backspace(t,s)},e.backDelay)}else{0===s&&e.options.preStringTyped(e.arrayPos);var i=t.substr(0,s+1);e.attr?e.el.attr(e.attr,i):e.isInput?e.el.val(i):"html"===e.contentType?e.el.html(i):e.el.text(i),s++,e.typewrite(t,s)}},i)},i)}},backspace:function(t,s){if(this.stop!==!0){var e=Math.round(70*Math.random())+this.backSpeed,i=this;i.isbackspacing=!0,i.timeout=setTimeout(function(){if("html"===i.contentType&&">"===t.substr(s).charAt(0)){for(var e="";"<"!==t.substr(s).charAt(0);)e-=t.substr(s).charAt(0),s--;s--,e+="<"}var r=t.substr(0,s);i.attr?i.el.attr(i.attr,r):i.isInput?i.el.val(r):"html"===i.contentType?i.el.html(r):i.el.text(r),s>i.stopNum?(s--,i.backspace(t,s)):s<=i.stopNum&&(i.arrayPos++,i.arrayPos===i.strings.length?(i.arrayPos=0,i.shuffle&&(i.sequence=i.shuffleArray(i.sequence)),i.init()):i.typewrite(i.strings[i.sequence[i.arrayPos]],s))},e)}},shuffleArray:function(t){var s,e,i=t.length;if(i)for(;--i;)e=Math.floor(Math.random()*(i+1)),s=t[e],t[e]=t[i],t[i]=s;return t},toggleTyped:function(){var t=this;t.stop?t.unpause():t.stop===!1&&t.isbackspacing===!1&&t.pause()},pause:function(){var t=this;t.stop!==!0&&(t.stop=!0)},unpause:function(){var t=this;t.stop!==!1&&(t.stop=!1,t.typewrite(t.curStringPause,t.curStrPosPause))},reset:function(){var t=this;clearInterval(t.timeout);var s=this.el.attr("id");this.el.after('<span id="'+s+'"/>'),this.el.remove(),"undefined"!=typeof this.cursor&&this.cursor.remove(),t.options.resetCallback()}},t.fn.typed=function(e){return this.each(function(){var i=t(this),r=i.data("typed"),o="object"==typeof e&&e;r||i.data("typed",r=new s(this,o)),"string"==typeof e&&r[e]()})},t.fn.typed.defaults={strings:["These are the default values...","You know what you should do?","Use your own!","Have a great day!"],stringsElement:null,typeSpeed:0,startDelay:0,backSpeed:0,shuffle:!1,backDelay:500,loop:!1,loopCount:!1,showCursor:!0,cursorChar:"|",attr:null,contentType:"html",callback:function(){},preStringTyped:function(){},onStringTyped:function(){},resetCallback:function(){}}}(window.jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR5cGVkMy5qcyJdLCJuYW1lcyI6WyIkIiwiVHlwZWQiLCJlbCIsIm9wdGlvbnMiLCJ0aGlzIiwiZXh0ZW5kIiwiZm4iLCJ0eXBlZCIsImRlZmF1bHRzIiwiaXNJbnB1dCIsImlzIiwiYXR0ciIsInNob3dDdXJzb3IiLCJlbENvbnRlbnQiLCJ0ZXh0IiwiY29udGVudFR5cGUiLCJ0eXBlU3BlZWQiLCJzdGFydERlbGF5IiwiYmFja1NwZWVkIiwiYmFja0RlbGF5Iiwic3RyaW5nc0VsZW1lbnQiLCJzdHJpbmdzIiwic3RyUG9zIiwiYXJyYXlQb3MiLCJzdG9wTnVtIiwibG9vcCIsImxvb3BDb3VudCIsImN1ckxvb3AiLCJzdG9wIiwiaXNiYWNrc3BhY2luZyIsImN1cnNvckNoYXIiLCJzaHVmZmxlIiwic2VxdWVuY2UiLCJjdXJTdHJpbmdQYXVzZSIsImN1clN0clBvc1BhdXNlIiwiYnVpbGQiLCJwcm90b3R5cGUiLCJjb25zdHJ1Y3RvciIsImluaXQiLCJzZWxmIiwidGltZW91dCIsInNldFRpbWVvdXQiLCJpIiwibGVuZ3RoIiwic2h1ZmZsZUFycmF5IiwidHlwZXdyaXRlIiwiY3Vyc29yIiwiYWZ0ZXIiLCJoaWRlIiwiZmluZCIsImVhY2giLCJrZXkiLCJ2YWx1ZSIsInB1c2giLCJodG1sIiwiY3VyU3RyaW5nIiwiY3VyU3RyUG9zIiwiaHVtYW5pemUiLCJNYXRoIiwicm91bmQiLCJyYW5kb20iLCJjaGFyUGF1c2UiLCJzdWJzdHIiLCJjaGFyQXQiLCJza2lwIiwidGVzdCIsImV4ZWMiLCJwYXJzZUludCIsInN1YnN0cmluZyIsImN1ckNoYXIiLCJ0YWciLCJlbmRUYWciLCJvblN0cmluZ1R5cGVkIiwiY2FsbGJhY2siLCJiYWNrc3BhY2UiLCJwcmVTdHJpbmdUeXBlZCIsIm5leHRTdHJpbmciLCJ2YWwiLCJhcnJheSIsInRtcCIsImN1cnJlbnQiLCJ0b3AiLCJmbG9vciIsInRvZ2dsZVR5cGVkIiwidW5wYXVzZSIsInBhdXNlIiwicmVzZXQiLCJjbGVhckludGVydmFsIiwiaWQiLCJyZW1vdmUiLCJyZXNldENhbGxiYWNrIiwib3B0aW9uIiwiJHRoaXMiLCJkYXRhIiwid2luZG93IiwialF1ZXJ5Il0sIm1hcHBpbmdzIjoiQ0F5QkUsU0FBU0EsR0FFUCxZQUVBLElBQUlDLEdBQVEsU0FBU0MsRUFBSUMsR0FHckJDLEtBQUtGLEdBQUtGLEVBQUVFLEdBR1pFLEtBQUtELFFBQVVILEVBQUVLLFVBQVdMLEVBQUVNLEdBQUdDLE1BQU1DLFNBQVVMLEdBR2pEQyxLQUFLSyxRQUFVTCxLQUFLRixHQUFHUSxHQUFHLFNBQzFCTixLQUFLTyxLQUFPUCxLQUFLRCxRQUFRUSxLQUd6QlAsS0FBS1EsWUFBYVIsS0FBS0ssU0FBa0JMLEtBQUtELFFBQVFTLFdBR3REUixLQUFLUyxVQUFZVCxLQUFLTyxLQUFPUCxLQUFLRixHQUFHUyxLQUFLUCxLQUFLTyxNQUFRUCxLQUFLRixHQUFHWSxPQUcvRFYsS0FBS1csWUFBY1gsS0FBS0QsUUFBUVksWUFHaENYLEtBQUtZLFVBQVlaLEtBQUtELFFBQVFhLFVBRzlCWixLQUFLYSxXQUFhYixLQUFLRCxRQUFRYyxXQUcvQmIsS0FBS2MsVUFBWWQsS0FBS0QsUUFBUWUsVUFHOUJkLEtBQUtlLFVBQVlmLEtBQUtELFFBQVFnQixVQUc5QmYsS0FBS2dCLGVBQWlCaEIsS0FBS0QsUUFBUWlCLGVBR25DaEIsS0FBS2lCLFFBQVVqQixLQUFLRCxRQUFRa0IsUUFHNUJqQixLQUFLa0IsT0FBUyxFQUdkbEIsS0FBS21CLFNBQVcsRUFLaEJuQixLQUFLb0IsUUFBVSxFQUdmcEIsS0FBS3FCLEtBQU9yQixLQUFLRCxRQUFRc0IsS0FDekJyQixLQUFLc0IsVUFBWXRCLEtBQUtELFFBQVF1QixVQUM5QnRCLEtBQUt1QixRQUFVLEVBR2Z2QixLQUFLd0IsTUFBTyxFQUNaeEIsS0FBS3lCLGVBQWdCLEVBRXJCekIsS0FBSzBCLFdBQWExQixLQUFLRCxRQUFRMkIsV0FHL0IxQixLQUFLMkIsUUFBVTNCLEtBQUtELFFBQVE0QixRQUU1QjNCLEtBQUs0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QUFPRCxFQUFNQyxLQUFLLFNBQ2xCMUYsRUFBMkIsZ0JBQVZ3RixJQUFzQkEsQ0FDdENFLElBQU1ELEVBQU1DLEtBQUssUUFBVUEsRUFBTyxHQUFJNUYsR0FBTUcsS0FBTUQsSUFDbEMsZ0JBQVZ3RixJQUFvQkUsRUFBS0YsUUFJNUMzRixFQUFFTSxHQUFHQyxNQUFNQyxVQUNQYSxTQUFVLGtDQUFtQywrQkFBZ0MsZ0JBQWlCLHFCQUM5RkQsZUFBZ0IsS0FFaEJKLFVBQVcsRUFFWEMsV0FBWSxFQUVaQyxVQUFXLEVBRVhhLFNBQVMsRUFFVFosVUFBVyxJQUVYTSxNQUFNLEVBRU5DLFdBQVcsRUFFWGQsWUFBWSxFQUVaa0IsV0FBWSxJQUVabkIsS0FBTSxLQUVOSSxZQUFhLE9BRWIwRCxTQUFVLGFBRVZFLGVBQWdCLGFBRWhCSCxjQUFlLGFBRWZrQixjQUFlLGVBSXJCSSxPQUFPQyIsImZpbGUiOiJ0eXBlZDMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cbi8vIFR5cGVkLmpzIHwgQ29weXJpZ2h0IChjKSAyMDE0IE1hdHQgQm9sZHQgfCB3d3cubWF0dGJvbGR0LmNvbVxuXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cblxuXG5cbiEgZnVuY3Rpb24oJCkge1xuXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICB2YXIgVHlwZWQgPSBmdW5jdGlvbihlbCwgb3B0aW9ucykge1xuXG4gICAgICAgIC8vIGNob3NlbiBlbGVtZW50IHRvIG1hbmlwdWxhdGUgdGV4dFxuICAgICAgICB0aGlzLmVsID0gJChlbCk7XG5cbiAgICAgICAgLy8gb3B0aW9uc1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgJC5mbi50eXBlZC5kZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAgICAgLy8gYXR0cmlidXRlIHRvIHR5cGUgaW50b1xuICAgICAgICB0aGlzLmlzSW5wdXQgPSB0aGlzLmVsLmlzKCdpbnB1dCcpO1xuICAgICAgICB0aGlzLmF0dHIgPSB0aGlzLm9wdGlvbnMuYXR0cjtcblxuICAgICAgICAvLyBzaG93IGN1cnNvclxuICAgICAgICB0aGlzLnNob3dDdXJzb3IgPSB0aGlzLmlzSW5wdXQgPyBmYWxzZSA6IHRoaXMub3B0aW9ucy5zaG93Q3Vyc29yO1xuXG4gICAgICAgIC8vIHRleHQgY29udGVudCBvZiBlbGVtZW50XG4gICAgICAgIHRoaXMuZWxDb250ZW50ID0gdGhpcy5hdHRyID8gdGhpcy5lbC5hdHRyKHRoaXMuYXR0cikgOiB0aGlzLmVsLnRleHQoKVxuXG4gICAgICAgIC8vIGh0bWwgb3IgcGxhaW4gdGV4dFxuICAgICAgICB0aGlzLmNvbnRlbnRUeXBlID0gdGhpcy5vcHRpb25zLmNvbnRlbnRUeXBlO1xuXG4gICAgICAgIC8vIHR5cGluZyBzcGVlZFxuICAgICAgICB0aGlzLnR5cGVTcGVlZCA9IHRoaXMub3B0aW9ucy50eXBlU3BlZWQ7XG5cbiAgICAgICAgLy8gYWRkIGEgZGVsYXkgYmVmb3JlIHR5cGluZyBzdGFydHNcbiAgICAgICAgdGhpcy5zdGFydERlbGF5ID0gdGhpcy5vcHRpb25zLnN0YXJ0RGVsYXk7XG5cbiAgICAgICAgLy8gYmFja3NwYWNpbmcgc3BlZWRcbiAgICAgICAgdGhpcy5iYWNrU3BlZWQgPSB0aGlzLm9wdGlvbnMuYmFja1NwZWVkO1xuXG4gICAgICAgIC8vIGFtb3VudCBvZiB0aW1lIHRvIHdhaXQgYmVmb3JlIGJhY2tzcGFjaW5nXG4gICAgICAgIHRoaXMuYmFja0RlbGF5ID0gdGhpcy5vcHRpb25zLmJhY2tEZWxheTtcblxuICAgICAgICAvLyBkaXYgY29udGFpbmluZyBzdHJpbmdzXG4gICAgICAgIHRoaXMuc3RyaW5nc0VsZW1lbnQgPSB0aGlzLm9wdGlvbnMuc3RyaW5nc0VsZW1lbnQ7XG5cbiAgICAgICAgLy8gaW5wdXQgc3RyaW5ncyBvZiB0ZXh0XG4gICAgICAgIHRoaXMuc3RyaW5ncyA9IHRoaXMub3B0aW9ucy5zdHJpbmdzO1xuXG4gICAgICAgIC8vIGNoYXJhY3RlciBudW1iZXIgcG9zaXRpb24gb2YgY3VycmVudCBzdHJpbmdcbiAgICAgICAgdGhpcy5zdHJQb3MgPSAwO1xuXG4gICAgICAgIC8vIGN1cnJlbnQgYXJyYXkgcG9zaXRpb25cbiAgICAgICAgdGhpcy5hcnJheVBvcyA9IDA7XG5cbiAgICAgICAgLy8gbnVtYmVyIHRvIHN0b3AgYmFja3NwYWNpbmcgb24uXG4gICAgICAgIC8vIGRlZmF1bHQgMCwgY2FuIGNoYW5nZSBkZXBlbmRpbmcgb24gaG93IG1hbnkgY2hhcnNcbiAgICAgICAgLy8geW91IHdhbnQgdG8gcmVtb3ZlIGF0IHRoZSB0aW1lXG4gICAgICAgIHRoaXMuc3RvcE51bSA9IDA7XG5cbiAgICAgICAgLy8gTG9vcGluZyBsb2dpY1xuICAgICAgICB0aGlzLmxvb3AgPSB0aGlzLm9wdGlvbnMubG9vcDtcbiAgICAgICAgdGhpcy5sb29wQ291bnQgPSB0aGlzLm9wdGlvbnMubG9vcENvdW50O1xuICAgICAgICB0aGlzLmN1ckxvb3AgPSAwO1xuXG4gICAgICAgIC8vIGZvciBzdG9wcGluZ1xuICAgICAgICB0aGlzLnN0b3AgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc2JhY2tzcGFjaW5nID0gZmFsc2U7XG4gICAgICAgIC8vIGN1c3RvbSBjdXJzb3JcbiAgICAgICAgdGhpcy5jdXJzb3JDaGFyID0gdGhpcy5vcHRpb25zLmN1cnNvckNoYXI7XG5cbiAgICAgICAgLy8gc2h1ZmZsZSB0aGUgc3RyaW5nc1xuICAgICAgICB0aGlzLnNodWZmbGUgPSB0aGlzLm9wdGlvbnMuc2h1ZmZsZTtcbiAgICAgICAgLy8gdGhlIG9yZGVyIG9mIHN0cmluZ3NcbiAgICAgICAgdGhpcy5zZXF1ZW5jZSA9IFtdO1xuXG4gICAgICAgIC8vIHN0b3JlIHBhdXNlZCBwb3NpdGlvblxuICAgICAgICB0aGlzLmN1clN0cmluZ1BhdXNlID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdXJTdHJQb3NQYXVzZSA9IG51bGw7XG5cbiAgICAgICAgLy8gQWxsIHN5c3RlbXMgZ28hXG4gICAgICAgIHRoaXMuYnVpbGQoKTtcbiAgICB9O1xuXG4gICAgVHlwZWQucHJvdG90eXBlID0ge1xuXG4gICAgICAgIGNvbnN0cnVjdG9yOiBUeXBlZFxuXG4gICAgICAgICxcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBiZWdpbiB0aGUgbG9vcCB3LyBmaXJzdCBjdXJyZW50IHN0cmluZyAoZ2xvYmFsIHNlbGYuc3RyaW5ncylcbiAgICAgICAgICAgIC8vIGN1cnJlbnQgc3RyaW5nIHdpbGwgYmUgcGFzc2VkIGFzIGFuIGFyZ3VtZW50IGVhY2ggdGltZSBhZnRlciB0aGlzXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBzZWxmLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGk9MDtpPHNlbGYuc3RyaW5ncy5sZW5ndGg7KytpKSBzZWxmLnNlcXVlbmNlW2ldPWk7XG5cbiAgICAgICAgICAgICAgICAvLyBzaHVmZmxlIHRoZSBhcnJheSBpZiB0cnVlXG4gICAgICAgICAgICAgICAgaWYoc2VsZi5zaHVmZmxlKSBzZWxmLnNlcXVlbmNlID0gc2VsZi5zaHVmZmxlQXJyYXkoc2VsZi5zZXF1ZW5jZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBTdGFydCB0eXBpbmdcbiAgICAgICAgICAgICAgICBzZWxmLnR5cGV3cml0ZShzZWxmLnN0cmluZ3Nbc2VsZi5zZXF1ZW5jZVtzZWxmLmFycmF5UG9zXV0sIHNlbGYuc3RyUG9zKTtcbiAgICAgICAgICAgIH0sIHNlbGYuc3RhcnREZWxheSk7XG4gICAgICAgIH1cblxuICAgICAgICAsXG4gICAgICAgIGJ1aWxkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIC8vIEluc2VydCBjdXJzb3JcbiAgICAgICAgICAgIGlmICh0aGlzLnNob3dDdXJzb3IgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnNvciA9ICQoXCI8c3BhbiBjbGFzcz1cXFwidHlwZWQtY3Vyc29yXFxcIj5cIiArIHRoaXMuY3Vyc29yQ2hhciArIFwiPC9zcGFuPlwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVsLmFmdGVyKHRoaXMuY3Vyc29yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnN0cmluZ3NFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgc2VsZi5zdHJpbmdzID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy5zdHJpbmdzRWxlbWVudC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgdmFyIHN0cmluZ3MgPSB0aGlzLnN0cmluZ3NFbGVtZW50LmZpbmQoJ3AnKTtcbiAgICAgICAgICAgICAgICAkLmVhY2goc3RyaW5ncywgZnVuY3Rpb24oa2V5LCB2YWx1ZSl7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc3RyaW5ncy5wdXNoKCQodmFsdWUpLmh0bWwoKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHBhc3MgY3VycmVudCBzdHJpbmcgc3RhdGUgdG8gZWFjaCBmdW5jdGlvbiwgdHlwZXMgMSBjaGFyIHBlciBjYWxsXG4gICAgICAgICxcbiAgICAgICAgdHlwZXdyaXRlOiBmdW5jdGlvbihjdXJTdHJpbmcsIGN1clN0clBvcykge1xuXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICAvLyBjYWNoZSBjaGFyYWN0ZXIgYW5kIHN0cmluZyBwb3NpdGlvblxuICAgICAgICAgICAgc2VsZi5jdXJTdHJpbmdQYXVzZSA9IGN1clN0cmluZztcbiAgICAgICAgICAgIHNlbGYuY3VyU3RyUG9zUGF1c2UgPSBjdXJTdHJQb3M7XG4gICAgICAgICAgICAvLyBleGl0IHdoZW4gc3RvcHBlZFxuICAgICAgICAgICAgaWYgKHRoaXMuc3RvcCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gdmFyeWluZyB2YWx1ZXMgZm9yIHNldFRpbWVvdXQgZHVyaW5nIHR5cGluZ1xuICAgICAgICAgICAgLy8gY2FuJ3QgYmUgZ2xvYmFsIHNpbmNlIG51bWJlciBjaGFuZ2VzIGVhY2ggdGltZSBsb29wIGlzIGV4ZWN1dGVkXG4gICAgICAgICAgICB2YXIgaHVtYW5pemUgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAoMTAwIC0gMzApKSArIHRoaXMudHlwZVNwZWVkO1xuICAgICAgICAgICAgc2VsZi5pc2JhY2tzcGFjaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0gb3B0aW9uYWwgLS0tLS0tLS0tLS0tLSAvL1xuICAgICAgICAgICAgLy8gYmFja3BhY2VzIGEgY2VydGFpbiBzdHJpbmcgZmFzdGVyXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cbiAgICAgICAgICAgIC8vIGlmIChzZWxmLmFycmF5UG9zID09IDEpe1xuICAgICAgICAgICAgLy8gIHNlbGYuYmFja0RlbGF5ID0gNTA7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAvLyBlbHNleyBzZWxmLmJhY2tEZWxheSA9IDUwMDsgfVxuXG4gICAgICAgICAgICAvLyBjb250YWluIHR5cGluZyBmdW5jdGlvbiBpbiBhIHRpbWVvdXQgaHVtYW5pemUnZCBkZWxheVxuICAgICAgICAgICAgc2VsZi50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBmb3IgYW4gZXNjYXBlIGNoYXJhY3RlciBiZWZvcmUgYSBwYXVzZSB2YWx1ZVxuICAgICAgICAgICAgICAgIC8vIGZvcm1hdDogXFxeXFxkKyAuLiBlZzogXjEwMDAgLi4gc2hvdWxkIGJlIGFibGUgdG8gcHJpbnQgdGhlIF4gdG9vIHVzaW5nIF5eXG4gICAgICAgICAgICAgICAgLy8gc2luZ2xlIF4gYXJlIHJlbW92ZWQgZnJvbSBzdHJpbmdcbiAgICAgICAgICAgICAgICB2YXIgY2hhclBhdXNlID0gMDtcbiAgICAgICAgICAgICAgICB2YXIgc3Vic3RyID0gY3VyU3RyaW5nLnN1YnN0cihjdXJTdHJQb3MpO1xuICAgICAgICAgICAgICAgIGlmIChzdWJzdHIuY2hhckF0KDApID09PSAnXicpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNraXAgPSAxOyAvLyBza2lwIGF0bGVhc3QgMVxuICAgICAgICAgICAgICAgICAgICBpZiAoL15cXF5cXGQrLy50ZXN0KHN1YnN0cikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnN0ciA9IC9cXGQrLy5leGVjKHN1YnN0cilbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwICs9IHN1YnN0ci5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFyUGF1c2UgPSBwYXJzZUludChzdWJzdHIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc3RyaXAgb3V0IHRoZSBlc2NhcGUgY2hhcmFjdGVyIGFuZCBwYXVzZSB2YWx1ZSBzbyB0aGV5J3JlIG5vdCBwcmludGVkXG4gICAgICAgICAgICAgICAgICAgIGN1clN0cmluZyA9IGN1clN0cmluZy5zdWJzdHJpbmcoMCwgY3VyU3RyUG9zKSArIGN1clN0cmluZy5zdWJzdHJpbmcoY3VyU3RyUG9zICsgc2tpcCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuY29udGVudFR5cGUgPT09ICdodG1sJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBza2lwIG92ZXIgaHRtbCB0YWdzIHdoaWxlIHR5cGluZ1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VyQ2hhciA9IGN1clN0cmluZy5zdWJzdHIoY3VyU3RyUG9zKS5jaGFyQXQoMClcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1ckNoYXIgPT09ICc8JyB8fCBjdXJDaGFyID09PSAnJicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWcgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbmRUYWcgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJDaGFyID09PSAnPCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRUYWcgPSAnPidcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kVGFnID0gJzsnXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY3VyU3RyaW5nLnN1YnN0cihjdXJTdHJQb3MpLmNoYXJBdCgwKSAhPT0gZW5kVGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnICs9IGN1clN0cmluZy5zdWJzdHIoY3VyU3RyUG9zKS5jaGFyQXQoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyU3RyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJTdHJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZyArPSBlbmRUYWc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyB0aW1lb3V0IGZvciBhbnkgcGF1c2UgYWZ0ZXIgYSBjaGFyYWN0ZXJcbiAgICAgICAgICAgICAgICBzZWxmLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VyU3RyUG9zID09PSBjdXJTdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmaXJlcyBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5vcHRpb25zLm9uU3RyaW5nVHlwZWQoc2VsZi5hcnJheVBvcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlzIHRoaXMgdGhlIGZpbmFsIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuYXJyYXlQb3MgPT09IHNlbGYuc3RyaW5ncy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5pbWF0aW9uIHRoYXQgb2NjdXJzIG9uIHRoZSBsYXN0IHR5cGVkIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYub3B0aW9ucy5jYWxsYmFjaygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jdXJMb29wKys7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBxdWl0IGlmIHdlIHdvbnQgbG9vcCBiYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYubG9vcCA9PT0gZmFsc2UgfHwgc2VsZi5jdXJMb29wID09PSBzZWxmLmxvb3BDb3VudClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYmFja3NwYWNlKGN1clN0cmluZywgY3VyU3RyUG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHNlbGYuYmFja0RlbGF5KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLyogY2FsbCBiZWZvcmUgZnVuY3Rpb25zIGlmIGFwcGxpY2FibGUgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJTdHJQb3MgPT09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5vcHRpb25zLnByZVN0cmluZ1R5cGVkKHNlbGYuYXJyYXlQb3MpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzdGFydCB0eXBpbmcgZWFjaCBuZXcgY2hhciBpbnRvIGV4aXN0aW5nIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY3VyU3RyaW5nOiBhcmcsIHNlbGYuZWwuaHRtbDogb3JpZ2luYWwgdGV4dCBpbnNpZGUgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRTdHJpbmcgPSBjdXJTdHJpbmcuc3Vic3RyKDAsIGN1clN0clBvcyArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuYXR0cikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZWwuYXR0cihzZWxmLmF0dHIsIG5leHRTdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5pc0lucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZWwudmFsKG5leHRTdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZi5jb250ZW50VHlwZSA9PT0gJ2h0bWwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZWwuaHRtbChuZXh0U3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmVsLnRleHQobmV4dFN0cmluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgY2hhcmFjdGVycyBvbmUgYnkgb25lXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJTdHJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvb3AgdGhlIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnR5cGV3cml0ZShjdXJTdHJpbmcsIGN1clN0clBvcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gZW5kIG9mIGNoYXJhY3RlciBwYXVzZVxuICAgICAgICAgICAgICAgIH0sIGNoYXJQYXVzZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBodW1hbml6ZWQgdmFsdWUgZm9yIHR5cGluZ1xuICAgICAgICAgICAgfSwgaHVtYW5pemUpO1xuXG4gICAgICAgIH1cblxuICAgICAgICAsXG4gICAgICAgIGJhY2tzcGFjZTogZnVuY3Rpb24oY3VyU3RyaW5nLCBjdXJTdHJQb3MpIHtcbiAgICAgICAgICAgIC8vIGV4aXQgd2hlbiBzdG9wcGVkXG4gICAgICAgICAgICBpZiAodGhpcy5zdG9wID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyB2YXJ5aW5nIHZhbHVlcyBmb3Igc2V0VGltZW91dCBkdXJpbmcgdHlwaW5nXG4gICAgICAgICAgICAvLyBjYW4ndCBiZSBnbG9iYWwgc2luY2UgbnVtYmVyIGNoYW5nZXMgZWFjaCB0aW1lIGxvb3AgaXMgZXhlY3V0ZWRcbiAgICAgICAgICAgIHZhciBodW1hbml6ZSA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqICgxMDAgLSAzMCkpICsgdGhpcy5iYWNrU3BlZWQ7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBzZWxmLmlzYmFja3NwYWNpbmcgPSB0cnVlO1xuICAgICAgICAgICAgc2VsZi50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIC8vIC0tLS0tIHRoaXMgcGFydCBpcyBvcHRpb25hbCAtLS0tLSAvL1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIHN0cmluZyBhcnJheSBwb3NpdGlvblxuICAgICAgICAgICAgICAgIC8vIG9uIHRoZSBmaXJzdCBzdHJpbmcsIG9ubHkgZGVsZXRlIG9uZSB3b3JkXG4gICAgICAgICAgICAgICAgLy8gdGhlIHN0b3BOdW0gYWN0dWFsbHkgcmVwcmVzZW50cyB0aGUgYW1vdW50IG9mIGNoYXJzIHRvXG4gICAgICAgICAgICAgICAgLy8ga2VlcCBpbiB0aGUgY3VycmVudCBzdHJpbmcuIEluIG15IGNhc2UgaXQncyAxNC5cbiAgICAgICAgICAgICAgICAvLyBpZiAoc2VsZi5hcnJheVBvcyA9PSAxKXtcbiAgICAgICAgICAgICAgICAvLyAgc2VsZi5zdG9wTnVtID0gMTQ7XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIC8vZXZlcnkgb3RoZXIgdGltZSwgZGVsZXRlIHRoZSB3aG9sZSB0eXBlZCBzdHJpbmdcbiAgICAgICAgICAgICAgICAvLyBlbHNle1xuICAgICAgICAgICAgICAgIC8vICBzZWxmLnN0b3BOdW0gPSAwO1xuICAgICAgICAgICAgICAgIC8vIH1cblxuICAgICAgICAgICAgICAgIGlmIChzZWxmLmNvbnRlbnRUeXBlID09PSAnaHRtbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2tpcCBvdmVyIGh0bWwgdGFncyB3aGlsZSBiYWNrc3BhY2luZ1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VyU3RyaW5nLnN1YnN0cihjdXJTdHJQb3MpLmNoYXJBdCgwKSA9PT0gJz4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFnID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY3VyU3RyaW5nLnN1YnN0cihjdXJTdHJQb3MpLmNoYXJBdCgwKSAhPT0gJzwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnIC09IGN1clN0cmluZy5zdWJzdHIoY3VyU3RyUG9zKS5jaGFyQXQoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyU3RyUG9zLS07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJTdHJQb3MtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZyArPSAnPCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyAtLS0tLSBjb250aW51ZSBpbXBvcnRhbnQgc3R1ZmYgLS0tLS0gLy9cbiAgICAgICAgICAgICAgICAvLyByZXBsYWNlIHRleHQgd2l0aCBiYXNlIHRleHQgKyB0eXBlZCBjaGFyYWN0ZXJzXG4gICAgICAgICAgICAgICAgdmFyIG5leHRTdHJpbmcgPSBjdXJTdHJpbmcuc3Vic3RyKDAsIGN1clN0clBvcyk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuYXR0cikge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmVsLmF0dHIoc2VsZi5hdHRyLCBuZXh0U3RyaW5nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5pc0lucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmVsLnZhbChuZXh0U3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzZWxmLmNvbnRlbnRUeXBlID09PSAnaHRtbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZWwuaHRtbChuZXh0U3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZWwudGV4dChuZXh0U3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBudW1iZXIgKGlkIG9mIGNoYXJhY3RlciBpbiBjdXJyZW50IHN0cmluZykgaXNcbiAgICAgICAgICAgICAgICAvLyBsZXNzIHRoYW4gdGhlIHN0b3AgbnVtYmVyLCBrZWVwIGdvaW5nXG4gICAgICAgICAgICAgICAgaWYgKGN1clN0clBvcyA+IHNlbGYuc3RvcE51bSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBzdWJ0cmFjdCBjaGFyYWN0ZXJzIG9uZSBieSBvbmVcbiAgICAgICAgICAgICAgICAgICAgY3VyU3RyUG9zLS07XG4gICAgICAgICAgICAgICAgICAgIC8vIGxvb3AgdGhlIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYmFja3NwYWNlKGN1clN0cmluZywgY3VyU3RyUG9zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIHN0b3AgbnVtYmVyIGhhcyBiZWVuIHJlYWNoZWQsIGluY3JlYXNlXG4gICAgICAgICAgICAgICAgLy8gYXJyYXkgcG9zaXRpb24gdG8gbmV4dCBzdHJpbmdcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjdXJTdHJQb3MgPD0gc2VsZi5zdG9wTnVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYXJyYXlQb3MrKztcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5hcnJheVBvcyA9PT0gc2VsZi5zdHJpbmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hcnJheVBvcyA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNodWZmbGUgc2VxdWVuY2UgYWdhaW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNlbGYuc2h1ZmZsZSkgc2VsZi5zZXF1ZW5jZSA9IHNlbGYuc2h1ZmZsZUFycmF5KHNlbGYuc2VxdWVuY2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmluaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnR5cGV3cml0ZShzZWxmLnN0cmluZ3Nbc2VsZi5zZXF1ZW5jZVtzZWxmLmFycmF5UG9zXV0sIGN1clN0clBvcyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gaHVtYW5pemVkIHZhbHVlIGZvciB0eXBpbmdcbiAgICAgICAgICAgIH0sIGh1bWFuaXplKTtcblxuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaHVmZmxlcyB0aGUgbnVtYmVycyBpbiB0aGUgZ2l2ZW4gYXJyYXkuXG4gICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5XG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheX1cbiAgICAgICAgICovXG4gICAgICAgICxzaHVmZmxlQXJyYXk6IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgICAgICB2YXIgdG1wLCBjdXJyZW50LCB0b3AgPSBhcnJheS5sZW5ndGg7XG4gICAgICAgICAgICBpZih0b3ApIHdoaWxlKC0tdG9wKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICh0b3AgKyAxKSk7XG4gICAgICAgICAgICAgICAgdG1wID0gYXJyYXlbY3VycmVudF07XG4gICAgICAgICAgICAgICAgYXJyYXlbY3VycmVudF0gPSBhcnJheVt0b3BdO1xuICAgICAgICAgICAgICAgIGFycmF5W3RvcF0gPSB0bXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICAgIH1cblxuICAgICAgICAsdG9nZ2xlVHlwZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKHNlbGYuc3RvcCkge1xuICAgICAgICAgICAgICAgIHNlbGYudW5wYXVzZSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzZWxmLnN0b3AgPT09IGZhbHNlICYmIHNlbGYuaXNiYWNrc3BhY2luZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnBhdXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAscGF1c2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKHNlbGYuc3RvcCA9PT0gdHJ1ZSkgcmV0dXJuO1xuICAgICAgICAgICAgc2VsZi5zdG9wID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgICx1bnBhdXNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIGlmIChzZWxmLnN0b3AgPT09IGZhbHNlKSByZXR1cm47XG4gICAgICAgICAgICBzZWxmLnN0b3AgPSBmYWxzZTtcbiAgICAgICAgICAgIHNlbGYudHlwZXdyaXRlKHNlbGYuY3VyU3RyaW5nUGF1c2UsIHNlbGYuY3VyU3RyUG9zUGF1c2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RhcnQgJiBTdG9wIGN1cnJlbnRseSBub3Qgd29ya2luZ1xuXG4gICAgICAgIC8vICwgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgLy8gICAgIHNlbGYuc3RvcCA9IHRydWU7XG4gICAgICAgIC8vICAgICBjbGVhckludGVydmFsKHNlbGYudGltZW91dCk7XG4gICAgICAgIC8vIH1cblxuICAgICAgICAvLyAsIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgLy8gICAgIGlmKHNlbGYuc3RvcCA9PT0gZmFsc2UpXG4gICAgICAgIC8vICAgICAgICByZXR1cm47XG5cbiAgICAgICAgLy8gICAgIHRoaXMuc3RvcCA9IGZhbHNlO1xuICAgICAgICAvLyAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIC8vIH1cblxuICAgICAgICAvLyBSZXNldCBhbmQgcmVidWlsZCB0aGUgZWxlbWVudFxuICAgICAgICAsXG4gICAgICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoc2VsZi50aW1lb3V0KTtcbiAgICAgICAgICAgIHZhciBpZCA9IHRoaXMuZWwuYXR0cignaWQnKTtcbiAgICAgICAgICAgIHRoaXMuZWwuYWZ0ZXIoJzxzcGFuIGlkPVwiJyArIGlkICsgJ1wiLz4nKVxuICAgICAgICAgICAgdGhpcy5lbC5yZW1vdmUoKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5jdXJzb3IgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJzb3IucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTZW5kIHRoZSBjYWxsYmFja1xuICAgICAgICAgICAgc2VsZi5vcHRpb25zLnJlc2V0Q2FsbGJhY2soKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgICQuZm4udHlwZWQgPSBmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgZGF0YSA9ICR0aGlzLmRhdGEoJ3R5cGVkJyksXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uO1xuICAgICAgICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCd0eXBlZCcsIChkYXRhID0gbmV3IFR5cGVkKHRoaXMsIG9wdGlvbnMpKSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkLmZuLnR5cGVkLmRlZmF1bHRzID0ge1xuICAgICAgICBzdHJpbmdzOiBbXCJUaGVzZSBhcmUgdGhlIGRlZmF1bHQgdmFsdWVzLi4uXCIsIFwiWW91IGtub3cgd2hhdCB5b3Ugc2hvdWxkIGRvP1wiLCBcIlVzZSB5b3VyIG93biFcIiwgXCJIYXZlIGEgZ3JlYXQgZGF5IVwiXSxcbiAgICAgICAgc3RyaW5nc0VsZW1lbnQ6IG51bGwsXG4gICAgICAgIC8vIHR5cGluZyBzcGVlZFxuICAgICAgICB0eXBlU3BlZWQ6IDAsXG4gICAgICAgIC8vIHRpbWUgYmVmb3JlIHR5cGluZyBzdGFydHNcbiAgICAgICAgc3RhcnREZWxheTogMCxcbiAgICAgICAgLy8gYmFja3NwYWNpbmcgc3BlZWRcbiAgICAgICAgYmFja1NwZWVkOiAwLFxuICAgICAgICAvLyBzaHVmZmxlIHRoZSBzdHJpbmdzXG4gICAgICAgIHNodWZmbGU6IGZhbHNlLFxuICAgICAgICAvLyB0aW1lIGJlZm9yZSBiYWNrc3BhY2luZ1xuICAgICAgICBiYWNrRGVsYXk6IDUwMCxcbiAgICAgICAgLy8gbG9vcFxuICAgICAgICBsb29wOiBmYWxzZSxcbiAgICAgICAgLy8gZmFsc2UgPSBpbmZpbml0ZVxuICAgICAgICBsb29wQ291bnQ6IGZhbHNlLFxuICAgICAgICAvLyBzaG93IGN1cnNvclxuICAgICAgICBzaG93Q3Vyc29yOiB0cnVlLFxuICAgICAgICAvLyBjaGFyYWN0ZXIgZm9yIGN1cnNvclxuICAgICAgICBjdXJzb3JDaGFyOiBcInxcIixcbiAgICAgICAgLy8gYXR0cmlidXRlIHRvIHR5cGUgKG51bGwgPT0gdGV4dClcbiAgICAgICAgYXR0cjogbnVsbCxcbiAgICAgICAgLy8gZWl0aGVyIGh0bWwgb3IgdGV4dFxuICAgICAgICBjb250ZW50VHlwZTogJ2h0bWwnLFxuICAgICAgICAvLyBjYWxsIHdoZW4gZG9uZSBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgLy8gc3RhcnRpbmcgY2FsbGJhY2sgZnVuY3Rpb24gYmVmb3JlIGVhY2ggc3RyaW5nXG4gICAgICAgIHByZVN0cmluZ1R5cGVkOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICAvL2NhbGxiYWNrIGZvciBldmVyeSB0eXBlZCBzdHJpbmdcbiAgICAgICAgb25TdHJpbmdUeXBlZDogZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgLy8gY2FsbGJhY2sgZm9yIHJlc2V0XG4gICAgICAgIHJlc2V0Q2FsbGJhY2s6IGZ1bmN0aW9uKCkge31cbiAgICB9O1xuXG5cbn0od2luZG93LmpRdWVyeSk7XG4iXX0=
