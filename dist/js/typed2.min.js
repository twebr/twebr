!function(t){"use strict";var s=function(s,o){this.el=t(s),this.options=t.extend({},t.fn.typed.defaults,o),this.isInput=this.el.is("input"),this.attr=this.options.attr,this.showCursor=!this.isInput&&this.options.showCursor,this.elContent=this.attr?this.el.attr(this.attr):this.el.text(),this.contentType=this.options.contentType,this.typeSpeed=this.options.typeSpeed,this.startDelay=this.options.startDelay,this.backSpeed=this.options.backSpeed,this.backDelay=this.options.backDelay,this.strings=this.options.strings,this.strPos=0,this.arrayPos=0,this.stopNum=0,this.loop=this.options.loop,this.loopCount=this.options.loopCount,this.curLoop=0,this.stop=!1,this.backspacing=!1,this.cursorChar=this.options.cursorChar,this.build()};s.prototype={constructor:s,init:function(){var t=this;t.timeout=setTimeout(function(){t.backspacing?t.backspace(t.strings[t.arrayPos],t.strPos):t.typewrite(t.strings[t.arrayPos],t.strPos)},t.startDelay)},build:function(){this.showCursor===!0&&(this.cursor=t('<span class="typed-cursor">'+this.cursorChar+"</span>"),this.el.after(this.cursor)),this.init()},typewrite:function(t,s){if(this.stop!==!0){var o=Math.round(70*Math.random())+this.typeSpeed,i=this;i.strPos=s,i.backspacing=!1,i.timeout=setTimeout(function(){var o=0,e=t.substr(s);if("^"===e.charAt(0)){var r=1;/^\^\d+/.test(e)&&(e=/\d+/.exec(e)[0],r+=e.length,o=parseInt(e)),t=t.substring(0,s)+t.substring(s+r)}if("html"===i.contentType&&"<"===t.substr(s).charAt(0)){for(var n="";">"!==t.substr(s).charAt(0);)n+=t.substr(s).charAt(0),s++;s++,n+=">"}i.timeout=setTimeout(function(){if(s===t.length){if(i.options.onStringTyped(i.arrayPos),i.arrayPos===i.strings.length-1&&(i.options.callback(),i.curLoop++,i.loop===!1||i.curLoop===i.loopCount))return;i.timeout=setTimeout(function(){i.backspace(t,s)},i.backDelay)}else{0===s&&i.options.preStringTyped(i.arrayPos);var o=i.elContent+t.substr(0,s+1);i.attr?i.el.attr(i.attr,o):"html"===i.contentType?i.el.html(o):i.el.text(o),s++,i.typewrite(t,s)}},o)},o)}},backspace:function(t,s){if(this.stop!==!0){var o=Math.round(70*Math.random())+this.backSpeed,i=this;i.strPos=s,i.backspacing=!0,i.timeout=setTimeout(function(){if("html"===i.contentType&&">"===t.substr(s).charAt(0)){for(var o="";"<"!==t.substr(s).charAt(0);)o-=t.substr(s).charAt(0),s--;s--,o+="<"}var e=i.elContent+t.substr(0,s);i.attr?i.el.attr(i.attr,e):"html"===i.contentType?i.el.html(e):i.el.text(e),s>i.stopNum?(s--,i.backspace(t,s)):s<=i.stopNum&&(i.arrayPos++,i.arrayPos===i.strings.length?(i.backspacing=!1,i.arrayPos=0,i.init()):i.typewrite(i.strings[i.arrayPos],s))},o)}},pauseTyping:function(){console.log("typing paused");var t=this;t.stop=!0,clearInterval(t.timeout)},continueTyping:function(){var t=this;console.log(t.stop),t.stop!==!1&&(this.stop=!1,this.init())},reset:function(){var t=this;clearInterval(t.timeout);var s=this.el.attr("id");this.el.after('<span id="'+s+'"/>'),this.el.remove(),this.cursor.remove(),t.options.resetCallback()}},t.fn.typed=function(o){return this.each(function(){var i=t(this),e=i.data("typed"),r="object"==typeof o&&o;e||i.data("typed",e=new s(this,r)),"string"==typeof o&&e[o]()})},t.fn.typed.defaults={strings:["These are the default values...","You know what you should do?","Use your own!","Have a great day!"],typeSpeed:0,startDelay:0,backSpeed:0,backDelay:500,loop:!1,loopCount:!1,showCursor:!0,cursorChar:"|",attr:null,contentType:"html",callback:function(){},preStringTyped:function(){},onStringTyped:function(){},resetCallback:function(){}}}(window.jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
