{"version":3,"sources":["typed.js"],"names":["$","Typed","el","options","this","extend","fn","typed","defaults","isInput","is","attr","showCursor","elContent","text","contentType","typeSpeed","startDelay","backSpeed","backDelay","stringsElement","strings","strPos","arrayPos","stopNum","loop","loopCount","curLoop","stop","cursorChar","cursorClass","shuffle","sequence","build","prototype","constructor","init","self","timeout","setTimeout","i","length","shuffleArray","typewrite","cursor","after","hide","children","each","key","value","push","html","curString","curStrPos","console","log","humanize","Math","round","random","charPause","substr","charAt","skip","test","exec","parseInt","substring","curChar","tag","endTag","onStringTyped","callback","backspace","preStringTyped","nextString","val","array","tmp","current","top","floor","reset","clearInterval","empty","remove","resetCallback","option","$this","data","window","jQuery"],"mappings":"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","file":"typed.min.js","sourcesContent":["// The MIT License (MIT)\n\n// Typed.js | Copyright (c) 2016 Matt Boldt | www.mattboldt.com\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n\n! function($) {\n\n\t\"use strict\";\n\n\tvar Typed = function(el, options) {\n\n\t\t// chosen element to manipulate text\n\t\tthis.el = $(el);\n\n\t\t// options\n\t\tthis.options = $.extend({}, $.fn.typed.defaults, options);\n\n\t\t// attribute to type into\n\t\tthis.isInput = this.el.is('input');\n\t\tthis.attr = this.options.attr;\n\n\t\t// show cursor\n\t\tthis.showCursor = this.isInput ? false : this.options.showCursor;\n\n\t\t// text content of element\n\t\tthis.elContent = this.attr ? this.el.attr(this.attr) : this.el.text();\n\n\t\t// html or plain text\n\t\tthis.contentType = this.options.contentType;\n\n\t\t// typing speed\n\t\tthis.typeSpeed = this.options.typeSpeed;\n\n\t\t// add a delay before typing starts\n\t\tthis.startDelay = this.options.startDelay;\n\n\t\t// backspacing speed\n\t\tthis.backSpeed = this.options.backSpeed;\n\n\t\t// amount of time to wait before backspacing\n\t\tthis.backDelay = this.options.backDelay;\n\n\t\t// div containing strings\n\t\tthis.stringsElement = this.options.stringsElement;\n\n\t\t// input strings of text\n\t\tthis.strings = this.options.strings;\n\n\t\t// character number position of current string\n\t\tthis.strPos = 0;\n\n\t\t// current array position\n\t\tthis.arrayPos = 0;\n\n\t\t// number to stop backspacing on.\n\t\t// default 0, can change depending on how many chars\n\t\t// you want to remove at the time\n\t\tthis.stopNum = 0;\n\n\t\t// Looping logic\n\t\tthis.loop = this.options.loop;\n\t\tthis.loopCount = this.options.loopCount;\n\t\tthis.curLoop = 0;\n\n\t\t// for stopping\n\t\tthis.stop = false;\n\n\t\t// custom cursor\n\t\tthis.cursorChar = this.options.cursorChar;\n\n\t\t// (added by Thijs Meeuwisse)\n\t\t// custom cursor class\n\t\tthis.cursorClass = this.options.cursorClass;\n\n\t\t// shuffle the strings\n\t\tthis.shuffle = this.options.shuffle;\n\t\t// the order of strings\n\t\tthis.sequence = [];\n\n\t\t// All systems go!\n\t\tthis.build();\n\t};\n\n\tTyped.prototype = {\n\n\t\tconstructor: Typed,\n\n\t\tinit: function() {\n\t\t\t// begin the loop w/ first current string (global self.strings)\n\t\t\t// current string will be passed as an argument each time after this\n\t\t\tvar self = this;\n\t\t\tself.timeout = setTimeout(function() {\n\t\t\t\tfor (var i=0;i<self.strings.length;++i) self.sequence[i]=i;\n\n\t\t\t\t// shuffle the array if true\n\t\t\t\tif(self.shuffle) self.sequence = self.shuffleArray(self.sequence);\n\n\t\t\t\t// Start typing\n\t\t\t\tself.typewrite(self.strings[self.sequence[self.arrayPos]], self.strPos);\n\t\t\t}, self.startDelay);\n\t\t},\n\n\t\tbuild: function() {\n\t\t\tvar self = this;\n\t\t\t// Insert cursor\n\t\t\tif (this.showCursor === true) {\n\t\t\t\tthis.cursor = $(\"<span class=\\\"\" + this.cursorClass + \"\\\">\" + this.cursorChar + \"</span>\");\n\t\t\t\tthis.el.after(this.cursor);\n\t\t\t}\n\t\t\tif (this.stringsElement) {\n\t\t\t\tthis.strings = [];\n\t\t\t\tthis.stringsElement.hide();\n\t\t\t\t// console.log(this.stringsElement.children());\n\t\t\t\tvar strings = this.stringsElement.children();\n\t\t\t\t$.each(strings, function(key, value){\n\t\t\t\t\tself.strings.push($(value).html());\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.init();\n\t\t},\n\n\t\t// pass current string state to each function, types 1 char per call\n\t\ttypewrite: function(curString, curStrPos) {\n\t\t\t// exit when stopped\n\t\t\tif (this.stop === true) {\n\t\t\t\tconsole.log(\"currently stopped. salla\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// varying values for setTimeout during typing\n\t\t\t// can't be global since number changes each time loop is executed\n\t\t\tvar humanize = Math.round(Math.random() * (100 - 30)) + this.typeSpeed;\n\t\t\tvar self = this;\n\n\t\t\t// ------------- optional ------------- //\n\t\t\t// backpaces a certain string faster\n\t\t\t// ------------------------------------ //\n\t\t\t// if (self.arrayPos == 1){\n\t\t\t//  self.backDelay = 50;\n\t\t\t// }\n\t\t\t// else{ self.backDelay = 500; }\n\n\t\t\t// contain typing function in a timeout humanize'd delay\n\t\t\tself.timeout = setTimeout(function() {\n\t\t\t\t// check for an escape character before a pause value\n\t\t\t\t// format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n\t\t\t\t// single ^ are removed from string\n\t\t\t\tvar charPause = 0;\n\t\t\t\tvar substr = curString.substr(curStrPos);\n\t\t\t\tif (substr.charAt(0) === '^') {\n\t\t\t\t\tvar skip = 1; // skip atleast 1\n\t\t\t\t\tif (/^\\^\\d+/.test(substr)) {\n\t\t\t\t\t\tsubstr = /\\d+/.exec(substr)[0];\n\t\t\t\t\t\tskip += substr.length;\n\t\t\t\t\t\tcharPause = parseInt(substr);\n\t\t\t\t\t}\n\n\t\t\t\t\t// strip out the escape character and pause value so they're not printed\n\t\t\t\t\tcurString = curString.substring(0, curStrPos) + curString.substring(curStrPos + skip);\n\t\t\t\t}\n\n\t\t\t\tif (self.contentType === 'html') {\n\t\t\t\t\t// skip over html tags while typing\n\t\t\t\t\tvar curChar = curString.substr(curStrPos).charAt(0)\n\t\t\t\t\tif (curChar === '<' || curChar === '&') {\n\t\t\t\t\t\tvar tag = '';\n\t\t\t\t\t\tvar endTag = '';\n\t\t\t\t\t\tif (curChar === '<') {\n\t\t\t\t\t\t\tendTag = '>'\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tendTag = ';'\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile (curString.substr(curStrPos + 1).charAt(0) !== endTag) {\n\t\t\t\t\t\t\ttag += curString.substr(curStrPos).charAt(0);\n\t\t\t\t\t\t\tcurStrPos++;\n\t\t\t\t\t\t\tif (curStrPos + 1 > curString.length) { break; }\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcurStrPos++;\n\t\t\t\t\t\ttag += endTag;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// timeout for any pause after a character\n\t\t\t\tself.timeout = setTimeout(function() {\n\t\t\t\t\tif (curStrPos === curString.length) {\n\t\t\t\t\t\t// fires callback function\n\t\t\t\t\t\tself.options.onStringTyped(self.arrayPos);\n\n\t\t\t\t\t\t// is this the final string\n\t\t\t\t\t\tif (self.arrayPos === self.strings.length - 1) {\n\t\t\t\t\t\t\t// animation that occurs on the last typed string\n\t\t\t\t\t\t\tself.options.callback();\n\n\t\t\t\t\t\t\tself.curLoop++;\n\n\t\t\t\t\t\t\t// quit if we wont loop back\n\t\t\t\t\t\t\tif (self.loop === false || self.curLoop === self.loopCount)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tself.timeout = setTimeout(function() {\n\t\t\t\t\t\t\tself.backspace(curString, curStrPos);\n\t\t\t\t\t\t}, self.backDelay);\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t/* call before functions if applicable */\n\t\t\t\t\t\tif (curStrPos === 0) {\n\t\t\t\t\t\t\tself.options.preStringTyped(self.arrayPos);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// start typing each new char into existing string\n\t\t\t\t\t\t// curString: arg, self.el.html: original text inside element\n\t\t\t\t\t\tvar nextString = curString.substr(0, curStrPos + 1);\n\t\t\t\t\t\tif (self.attr) {\n\t\t\t\t\t\t\tself.el.attr(self.attr, nextString);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (self.isInput) {\n\t\t\t\t\t\t\t\tself.el.val(nextString);\n\t\t\t\t\t\t\t} else if (self.contentType === 'html') {\n\t\t\t\t\t\t\t\tself.el.html(nextString);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tself.el.text(nextString);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// add characters one by one\n\t\t\t\t\t\tcurStrPos++;\n\t\t\t\t\t\t// loop the function\n\t\t\t\t\t\tself.typewrite(curString, curStrPos);\n\t\t\t\t\t}\n\t\t\t\t\t// end of character pause\n\t\t\t\t}, charPause);\n\n\t\t\t\t// humanized value for typing\n\t\t\t}, humanize);\n\n\t\t},\n\n\t\tbackspace: function(curString, curStrPos) {\n\t\t\t// exit when stopped\n\t\t\tif (this.stop === true) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// varying values for setTimeout during typing\n\t\t\t// can't be global since number changes each time loop is executed\n\t\t\tvar humanize = Math.round(Math.random() * (100 - 30)) + this.backSpeed;\n\t\t\tvar self = this;\n\n\t\t\tself.timeout = setTimeout(function() {\n\n\t\t\t\t// ----- this part is optional ----- //\n\t\t\t\t// check string array position\n\t\t\t\t// on the first string, only delete one word\n\t\t\t\t// the stopNum actually represents the amount of chars to\n\t\t\t\t// keep in the current string. In my case it's 14.\n\t\t\t\t// if (self.arrayPos == 1){\n\t\t\t\t//  self.stopNum = 14;\n\t\t\t\t// }\n\t\t\t\t//every other time, delete the whole typed string\n\t\t\t\t// else{\n\t\t\t\t//  self.stopNum = 0;\n\t\t\t\t// }\n\n\t\t\t\tif (self.contentType === 'html') {\n\t\t\t\t\t// skip over html tags while backspacing\n\t\t\t\t\tif (curString.substr(curStrPos).charAt(0) === '>') {\n\t\t\t\t\t\tvar tag = '';\n\t\t\t\t\t\twhile (curString.substr(curStrPos - 1).charAt(0) !== '<') {\n\t\t\t\t\t\t\ttag -= curString.substr(curStrPos).charAt(0);\n\t\t\t\t\t\t\tcurStrPos--;\n\t\t\t\t\t\t\tif (curStrPos < 0) { break; }\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcurStrPos--;\n\t\t\t\t\t\ttag += '<';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// ----- continue important stuff ----- //\n\t\t\t\t// replace text with base text + typed characters\n\t\t\t\tvar nextString = curString.substr(0, curStrPos);\n\t\t\t\tif (self.attr) {\n\t\t\t\t\tself.el.attr(self.attr, nextString);\n\t\t\t\t} else {\n\t\t\t\t\tif (self.isInput) {\n\t\t\t\t\t\tself.el.val(nextString);\n\t\t\t\t\t} else if (self.contentType === 'html') {\n\t\t\t\t\t\tself.el.html(nextString);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.el.text(nextString);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if the number (id of character in current string) is\n\t\t\t\t// less than the stop number, keep going\n\t\t\t\tif (curStrPos > self.stopNum) {\n\t\t\t\t\t// subtract characters one by one\n\t\t\t\t\tcurStrPos--;\n\t\t\t\t\t// loop the function\n\t\t\t\t\tself.backspace(curString, curStrPos);\n\t\t\t\t}\n\t\t\t\t// if the stop number has been reached, increase\n\t\t\t\t// array position to next string\n\t\t\t\telse if (curStrPos <= self.stopNum) {\n\t\t\t\t\tself.arrayPos++;\n\n\t\t\t\t\tif (self.arrayPos === self.strings.length) {\n\t\t\t\t\t\tself.arrayPos = 0;\n\n\t\t\t\t\t\t// Shuffle sequence again\n\t\t\t\t\t\tif(self.shuffle) self.sequence = self.shuffleArray(self.sequence);\n\n\t\t\t\t\t\tself.init();\n\t\t\t\t\t} else\n\t\t\t\t\t\tself.typewrite(self.strings[self.sequence[self.arrayPos]], curStrPos);\n\t\t\t\t}\n\n\t\t\t\t// humanized value for typing\n\t\t\t}, humanize);\n\n\t\t},\n\t\t/**\n\t\t * Shuffles the numbers in the given array.\n\t\t * @param {Array} array\n\t\t * @returns {Array}\n\t\t */\n\t\tshuffleArray: function(array) {\n\t\t\tvar tmp, current, top = array.length;\n\t\t\tif(top) while(--top) {\n\t\t\t\tcurrent = Math.floor(Math.random() * (top + 1));\n\t\t\t\ttmp = array[current];\n\t\t\t\tarray[current] = array[top];\n\t\t\t\tarray[top] = tmp;\n\t\t\t}\n\t\t\treturn array;\n\t\t},\n\n\t\t// Start & Stop currently not working\n\n\t\t// , stop: function() {\n\t\t//     var self = this;\n\n\t\t//     self.stop = true;\n\t\t//     clearInterval(self.timeout);\n\t\t// }\n\n\t\t// , start: function() {\n\t\t//     var self = this;\n\t\t//     if(self.stop === false)\n\t\t//        return;\n\n\t\t//     this.stop = false;\n\t\t//     this.init();\n\t\t// }\n\n\t\t// Reset and rebuild the element\n\t\treset: function() {\n\t\t\tvar self = this;\n\t\t\tclearInterval(self.timeout);\n\t\t\tvar id = this.el.attr('id');\n\t\t\tthis.el.empty();\n\t\t\tif (typeof this.cursor !== 'undefined') {\n        this.cursor.remove();\n      }\n\t\t\tthis.strPos = 0;\n\t\t\tthis.arrayPos = 0;\n\t\t\tthis.curLoop = 0;\n\t\t\t// Send the callback\n\t\t\tthis.options.resetCallback();\n\t\t}\n\n\t};\n\n\t$.fn.typed = function(option) {\n\t\treturn this.each(function() {\n\t\t\tvar $this = $(this),\n\t\t\t\tdata = $this.data('typed'),\n\t\t\t\toptions = typeof option == 'object' && option;\n\t\t\tif (data) { data.reset(); }\n\t\t\t$this.data('typed', (data = new Typed(this, options)));\n\t\t\tif (typeof option == 'string') data[option]();\n\t\t});\n\t};\n\n\t$.fn.typed.defaults = {\n\t\tstrings: [\"These are the default values...\", \"You know what you should do?\", \"Use your own!\", \"Have a great day!\"],\n\t\tstringsElement: null,\n\t\t// typing speed\n\t\ttypeSpeed: 0,\n\t\t// time before typing starts\n\t\tstartDelay: 0,\n\t\t// backspacing speed\n\t\tbackSpeed: 0,\n\t\t// shuffle the strings\n\t\tshuffle: false,\n\t\t// time before backspacing\n\t\tbackDelay: 500,\n\t\t// loop\n\t\tloop: false,\n\t\t// false = infinite\n\t\tloopCount: false,\n\t\t// show cursor\n\t\tshowCursor: true,\n\t\t// character for cursor\n\t\tcursorChar: \"|\",\n\t\t// (added by Thijs) class for cursor\n\t\tcursorClass: \"typed-cursor\",\n\t\t// attribute to type (null == text)\n\t\tattr: null,\n\t\t// either html or text\n\t\tcontentType: 'html',\n\t\t// call when done callback function\n\t\tcallback: function() {},\n\t\t// starting callback function before each string\n\t\tpreStringTyped: function() {},\n\t\t//callback for every typed string\n\t\tonStringTyped: function() {},\n\t\t// callback for reset\n\t\tresetCallback: function() {}\n\t};\n\n\n}(window.jQuery);\n"]}