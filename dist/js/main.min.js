function shuffle(t){var r,s,a;for(a=t.length;a;a--)r=Math.floor(Math.random()*a),s=t[a-1],t[a-1]=t[r],t[r]=s}$(document).ready(function(){var t=$("#js-hero"),r=$("#js-typed-strings"),s=$('<span class="js-typed-cursor">|</span>'),a="js-typed-cursor__stationary";t.after(s);var n=function(){var t=r.children(),s=[];$.each(t,function(t,r){s.push($(r).html())});var a=[s[0]];return s.shift(),shuffle(s),a.concat(s)},o=n();console.log(o);var e=function(r,n,o){0===n&&s.removeClass(a);var u=r.substr(n).charAt(0);if("<"===u||"&"===u){var h="",c="";for(c="<"===u?">":";";r.substr(n+1).charAt(0)!==c&&(h+=r.substr(n).charAt(0),n++,!(n+1>r.length)););n++,h+=c}var l=Math.round(10+70*Math.random());setTimeout(function(){n===r.length?s.addClass(a):(n++,t.html(r.substr(0,n)),e(r,n,o))},l)},u=function(r,n){n===r.length&&s.removeClass(a);r.substr(n).charAt(0);if(">"===r.substr(n).charAt(0)){for(var o="";"<"!==r.substr(n-1).charAt(0)&&(o-=r.substr(n).charAt(0),n--,!(n<0)););n--,o+="<"}var e=Math.round(10+70*Math.random());setTimeout(function(){0===n?s.addClass(a):(n--,t.html(r.substr(0,n)),u(r,n))},e)};e(o[0],0),setTimeout(function(){console.log("delayed shizzle"),u(o[0],o[0].length)},5e3)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
